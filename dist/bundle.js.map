{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./fetch.js","webpack:///./main.js","webpack:///./parser.js","webpack:///./setupWorldView.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,6BAAU;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,0CAA0C,UAAU,eAAe,QAAQ;;AAE3E;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY,aAAa,KAAK;AAC3D;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;;AAEhE;AACA,qFAAqF,WAAW;AAChG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,sC;;;;;;;;;;;ACjGlB,2BAA2B,mBAAO,CAAC,6CAAkB;AACrD,OAAO,qCAAqC,GAAG,mBAAO,CAAC,8BAAY;;AAEnE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,Q;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;;;;;;;ACnEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA,oC","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./main.js\");\n","const parseXml = require('./parser');\n\nfunction fetchSats() {\n    let requestParams = {\n        contentType: 'application/xml',\n        url: 'https://sscweb.sci.gsfc.nasa.gov/WS/sscr/2/observatories'\n    }\n    let satsRequest = $.ajax(requestParams).then((res) => {\n        let ids = [];\n        let parsed = parseXml(res);\n        sats = parsed.ObservatoryResponse.Observatory;\n        for (sat of sats) {ids.push(sat.Id['#text']);}\n        return ids;\n    })\n    return satsRequest;\n}\n\nfunction buildSatelliteRequest(startTime, endTime, satelliteIds) {\n    let xmlBegin = '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>';\n\n    let timeTag = `<TimeInterval><Start>${startTime}</Start><End>${endTime}</End></TimeInterval>`;\n\n    satTag = ''\n    for ([index, satId] of satelliteIds.entries()) {\n        if (index < 152) {\n            satTag += `<Satellites><Id>${satId}</Id><ResolutionFactor>2</ResolutionFactor></Satellites>`;\n        }\n    };\n\n    let allFiltersTag = '<AllLocationFilters>true</AllLocationFilters>';\n    let coordinateTag = '';\n    let axes = ['X', 'Y', 'Z'];\n    let baseAxisTag = '<CoordinateOptions><CoordinateSystem>Geo</CoordinateSystem>';\n    for (axis of axes) {\n        let thisAxisTag = `${baseAxisTag}<Component>${axis}</Component></CoordinateOptions>`;\n        coordinateTag += thisAxisTag\n    };\n    let minMaxTag = '<MinMaxPoints>2</MinMaxPoints>';\n    let outputOptionsInner = allFiltersTag + coordinateTag + minMaxTag;\n    let outputOptionsTag = `<OutputOptions>${outputOptionsInner}</OutputOptions>`;\n\n    let requestXML = timeTag + satTag + outputOptionsTag;\n    let withDataRequest = `<DataRequest xmlns=\"http://sscweb.gsfc.nasa.gov/schema\">${requestXML}</DataRequest>`;\n    let result = xmlBegin + withDataRequest;\n    return result;\n}\n\nfunction getIdChunks(satelliteIds) {\n    chunkSize = 50;\n    numIds = satelliteIds.length;\n    chunks = []\n    for (let i=0; i < numIds; i+=(chunkSize+1)) {\n        chunks.push(satelliteIds.slice(i, i + chunkSize));\n    }\n    return chunks;\n}\n\nfunction fetchSatelliteCoordinates(windowObject, startTime, endTime) {\n    let idChunks = getIdChunks(windowObject.satelliteIds)\n    let totalIds = windowObject.satelliteIds.length\n    console.log('Nunchuks: ' + idChunks.length)\n    for (ids of idChunks) {\n        let xmlData = buildSatelliteRequest(\n            startTime, endTime, ids);\n        let requestParams = {\n            contentType: 'application/xml',\n            url: 'https://sscweb.sci.gsfc.nasa.gov/WS/sscr/2/locations',\n            method: 'POST',\n            data: xmlData\n        }\n        let locationsRequest = $.ajax(requestParams).then(\n            (res) => {\n                let parsed = parseXml(res, ['Data', 'Time', 'X', 'Y', 'Z']);\n                for (satellite of parsed.Response.Result.Data) {\n                    let satelliteId = satellite.Id[\"#text\"];\n                    let times = satellite.Time;\n                    for (const [idx, time] of times.entries()) {\n                        let coordinates = [\n                            parseFloat(satellite.Coordinates.X[idx][\"#text\"]),\n                            parseFloat(satellite.Coordinates.Y[idx][\"#text\"]),\n                            parseFloat(satellite.Coordinates.Z[idx][\"#text\"])\n                        ];\n                        windowObject.addSatelliteData(\n                            satelliteId,\n                            time[\"#text\"],\n                            coordinates\n                        );\n                    }\n                };\n                windowObject.placeSatellites(ids);\n                // console.log('Put satellite render logic here')\n                // console.log(windowObject.satellitePositions)\n            }\n        )\n    };\n}\n\nmodule.exports = {fetchSatelliteCoordinates, fetchSats};","const WorldWindowWrapper = require('./setupWorldView');\nconst {fetchSats, fetchSatelliteCoordinates} = require('./fetch.js')\n\nfunction subscribeHandlers(wwObj) {\n    $('#timeSlider').on('change', () => {\n        wwObj.timePercent = $('#timeSlider').val();\n        wwObj.replaceSatellites();\n    })\n    $('#datePicker').on('change', () => {\n        let date = $('#datePicker').val()\n        let startTime = date + 'T00:00:00+5:00';\n        let endTime = date + 'T11:59:59+5:00';\n        fetchSatelliteCoordinates(wwObj, startTime, endTime);\n    })\n}\n\nfunction main() {\n    let wwd = new WorldWind.WorldWindow(\"canvasOne\");\n    worldWindow = new WorldWindowWrapper(wwd);\n    worldWindow.setupWorldView();\n    fetchSats().then(\n        (res) => {\n            worldWindow.satelliteIds = res;\n            fetchSatelliteCoordinates(\n                worldWindow, '2017-10-20T15:53:00+05:00', '2018-10-20T15:53:00+05:00');\n        }\n    );\n    subscribeHandlers(worldWindow);\n}\n\n$(main);","function parseXml(xmlObj, arrayTags) {\n    // var dom = null;\n    // if (window.DOMParser) {\n    //     dom = (new DOMParser()).parseFromString(xml, \"text/xml\");\n    // }\n    // else if (window.ActiveXObject)\n    // {\n    //     dom = new ActiveXObject('Microsoft.XMLDOM');\n    //     dom.async = false;\n    //     if (!dom.loadXML(xml))\n    //     {\n    //         throw dom.parseError.reason + \" \" + dom.parseError.srcText;\n    //     }\n    // }\n    // else {throw \"cannot parse xml string!\";}\n\n    function isArray(o) {\n        return Object.prototype.toString.apply(o) === '[object Array]';\n    }\n\n    function parseNode(xmlNode, result) {\n        if (xmlNode.nodeName == \"#text\") {\n            var v = xmlNode.nodeValue;\n            if (v.trim()) {\n               result['#text'] = v;\n            }\n            return;\n        }\n\n        var jsonNode = {};\n        var existing = result[xmlNode.nodeName];\n        if (existing) {\n            if(!isArray(existing)) {\n                result[xmlNode.nodeName] = [existing, jsonNode];\n            }\n            else {result[xmlNode.nodeName].push(jsonNode);}\n        }\n        else\n        {\n            if(arrayTags && arrayTags.indexOf(xmlNode.nodeName) != -1) {\n                result[xmlNode.nodeName] = [jsonNode];\n            }\n            else {\n                result[xmlNode.nodeName] = jsonNode;\n            }\n        }\n\n        if(xmlNode.attributes) {\n            var length = xmlNode.attributes.length;\n            for(var i = 0; i < length; i++) {\n                var attribute = xmlNode.attributes[i];\n                jsonNode[attribute.nodeName] = attribute.nodeValue;\n            }\n        }\n\n        var length = xmlNode.childNodes.length;\n        for(var i = 0; i < length; i++) {\n            parseNode(xmlNode.childNodes[i], jsonNode);\n        }\n    }\n\n    var result = {};\n    if(xmlObj.childNodes.length) {\n        parseNode(xmlObj.childNodes[0], result);\n    }\n    return result;\n}\n\nmodule.exports = parseXml;","\nclass WorldWindowWrapper {\n\n    constructor(wwd) {\n        this.wwd = wwd;\n        this.layers = {};\n        this.satellitePositions = {};\n        this.satelliteIds = [];\n        this.timePercent = 0;\n    }\n\n    addLayer(layer) {\n        this.layers[layer.displayName] = layer;\n        return this.wwd.addLayer(layer);\n    }\n\n    addSatelliteData(satelliteId, time, coordinates) {\n        if (!this.satellitePositions[satelliteId]) {\n            this.satellitePositions[satelliteId] = {};\n        }\n        this.satellitePositions[satelliteId][time] = coordinates;\n    }\n\n    setupWorldView() {\n        let layers = [\n            new WorldWind.BMNGOneImageLayer(),\n            new WorldWind.BMNGLandsatLayer(),\n        ];\n\n        for (let layer of layers) {\n            this.addLayer(layer);\n        };\n        this.addLayer(new WorldWind.CoordinatesDisplayLayer(this.wwd));\n        this.addLayer(new WorldWind.ViewControlsLayer(this.wwd));\n    }\n\n\n    replaceSatellites() {\n        this.placeSatellites(this.satelliteIds);\n    }\n\n    placeSatellites(ids) {\n        let modelLayer = new WorldWind.RenderableLayer('Satellite Layer');\n        console.log(modelLayer)\n        this.addLayer(modelLayer);\n        console.log(WorldWind.configuration.baseUrl + 'examples/collada_models/duck/');\n        var config = { dirPath: WorldWind.configuration.baseUrl + 'examples/collada_models/duck/' };\n        for (let satelliteId of ids) {\n            console.log(satelliteId)\n            console.log(this.satellitePositions[satelliteId])\n            if (this.satellitePositions[satelliteId]) {\n                let times = Object.keys(this.satellitePositions[satelliteId])\n                if (times) {\n                    let timeIdx = Math.round(this.timePercent / times.length)\n                    let time = times[timeIdx]\n                    let coordinates = this.satellitePositions[satelliteId][time];\n                    let position = new WorldWind.Position(\n                        coordinates[0], coordinates[1], coordinates[2]\n                    );\n                    let colladaLoader = new WorldWind.ColladaLoader(position, config);\n                    colladaLoader.load(\"duck.dae\", (colladaModel) => {\n                        colladaModel.scale = 9000;\n                        console.log(this.layers)\n                        this.layers['Satellite Layer'].addRenderable(colladaModel);\n                    });\n                }\n            }\n        }\n    }\n\n}\n\nmodule.exports = WorldWindowWrapper;"],"sourceRoot":""}